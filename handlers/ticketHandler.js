const { ActionRowBuilder, StringSelectMenuBuilder, ButtonBuilder, ButtonStyle, PermissionFlagsBits, EmbedBuilder } = require('discord.js');
const config = require('../config/config');
const ticketManager = require('../utils/ticketManager');
const scheduleManager = require('../utils/scheduleManager');
const ticketCounter = require('../utils/ticketCounter');
const firebase = require('../utils/firebase');

module.exports = (client) => {
    // Message create event for commands
    client.on('messageCreate', async (message) => {
        if (message.author.bot) return;
        
        // Check if message is in a paused ticket channel
        const ticket = ticketManager.getTicketByChannelId(message.channel.id);
        if (ticket && ticket.isPaused && message.author.id === ticket.userId) {
            // Delete the message and send ephemeral warning
            await message.delete().catch(() => {});
            
            // Send a temporary warning message that deletes itself
            const warningMsg = await message.channel.send({
                content: `‚è∏Ô∏è ${message.author} ‡∏ï‡∏±‡πã‡∏ß‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏´‡∏¢‡∏∏‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÇ‡∏î‡∏¢‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ`
            });
            
            // Delete warning after 5 seconds
            setTimeout(async () => {
                await warningMsg.delete().catch(() => {});
            }, 5000);
            
            return;
        }
        
        console.log(`Message received: "${message.content}" from ${message.author.tag}`);
        
        const prefix = config.bot.prefix;
        if (!message.content.startsWith(prefix)) return;

        const args = message.content.slice(prefix.length).trim().split(/ +/);
        const command = args.shift().toLowerCase();

        // Setup tickets command
        if (command === 'setup-tickets') {
            console.log('Setup tickets command detected!');
            
            if (!message.member.permissions.has(PermissionFlagsBits.Administrator)) {
                return message.reply('‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Administrator ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ');
            }

            // Create embed with better styling
            const embed = new EmbedBuilder()
                .setTitle('üé´ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô - Thai Esports League')
                .setDescription('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á\n‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡∏à‡∏∞‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î!')
                .setColor(config.colors.primary)
                .addFields({
                    name: 'üìã ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
                    value: '1Ô∏è‚É£ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á\n2Ô∏è‚É£ ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì\n3Ô∏è‚É£ ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì\n4Ô∏è‚É£ ‡∏£‡∏≠‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö'
                })
                .addFields({
                    name: 'üïê ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£',
                    value: `${config.schedule.startHour}:00 - ${config.schedule.endHour}:00 ‡∏ô. (‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢)`,
                    inline: true
                })
                .setFooter({ text: 'Thai Esports League Support System' })
                .setTimestamp();

            const selectMenu = new StringSelectMenuBuilder()
                .setCustomId('ticket_category_select')
                .setPlaceholder('üéØ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠')
                .addOptions(
                    Object.entries(config.ticketCategories).map(([key, category]) => ({
                        label: category.label,
                        description: category.description,
                        value: key,
                        emoji: category.emoji
                    }))
                );

            const row = new ActionRowBuilder().addComponents(selectMenu);

            await message.channel.send({
                embeds: [embed],
                components: [row]
            });

            console.log('Ticket panel sent successfully!');
            await message.delete().catch(() => {});
        }
        
        // Test command
        if (command === 'test') {
            await message.reply('‚úÖ Commands are working!');
        }

        // Ticket stats command
        if (command === 'ticket-stats') {
            if (!message.member.permissions.has(PermissionFlagsBits.ManageChannels)) {
                return message.reply('‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ');
            }

            const stats = ticketManager.getStats();
            const embed = new EmbedBuilder()
                .setTitle('üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠')
                .setColor(config.colors.primary)
                .addFields(
                    { name: 'üé´ ‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà', value: stats.activeTickets.toString(), inline: true },
                    { name: 'üìã ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà', value: Object.entries(stats.categoriesBreakdown).map(([cat, count]) => `${config.ticketCategories[cat]?.emoji || 'üìÑ'} ${config.ticketCategories[cat]?.label || cat}: ${count}`).join('\n') || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡πã‡∏ß‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà' }
                )
                .setTimestamp();

            await message.reply({ embeds: [embed] });
        }

        // Ticket counter stats command
        if (command === 'ticket-counters') {
            if (!message.member.permissions.has(PermissionFlagsBits.ManageChannels)) {
                return message.reply('‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ');
            }

            const stats = await ticketCounter.getStats();
            const embed = new EmbedBuilder()
                .setTitle('üî¢ ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ï‡∏±‡πã‡∏ß')
                .setColor(config.colors.primary)
                .setDescription('‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ï‡∏±‡πã‡∏ß‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà')
                .setTimestamp();

            for (const [category, data] of Object.entries(stats)) {
                const categoryInfo = config.ticketCategories[category];
                embed.addFields({
                    name: `${categoryInfo?.emoji || 'üìÑ'} ${categoryInfo?.label || category}`,
                    value: `**‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß:** ${data.total} ‡∏ï‡∏±‡πã‡∏ß\n**‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:** ${data.current}\n**‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ñ‡∏±‡∏î‡πÑ‡∏õ:** ${data.next}`,
                    inline: true
                });
            }

            await message.reply({ embeds: [embed] });
        }

        // Reset counters command (admin only)
        if (command === 'reset-counters') {
            if (!message.member.permissions.has(PermissionFlagsBits.Administrator)) {
                return message.reply('‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Administrator ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ');
            }

            await ticketCounter.resetCounters();
            await message.reply('üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!');
        }

        // Force close ticket command
        if (command === 'force-close') {
            if (!message.member.permissions.has(PermissionFlagsBits.Administrator)) {
                return message.reply('‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Administrator ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ');
            }

            const ticket = ticketManager.getTicketByChannelId(message.channel.id);
            if (!ticket) {
                return message.reply('‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ï‡∏±‡πã‡∏ß‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô');
            }

            await message.reply('üîí ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡πã‡∏ß‡πÅ‡∏ö‡∏ö‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö...');

            // Generate transcript
            const transcriptResult = await ticketManager.generateTranscript(message.channel);
            
            // Close ticket
            await ticketManager.closeTicket(message.channel.id, message.author);

            // Log and delete
            console.log(`üî® Force closed ticket: ${message.channel.name} by ${message.author.tag}`);
            
            setTimeout(async () => {
                try {
                    await message.channel.delete('Force closed by admin');
                } catch (error) {
                    console.error('Error deleting channel:', error);
                }
            }, 5000);
        }

        // Firebase status command
        if (command === 'firebase-status') {
            if (!message.member.permissions.has(PermissionFlagsBits.Administrator)) {
                return message.reply('‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Administrator ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ');
            }

            const isConnected = firebase.isInitialized();
            const embed = new EmbedBuilder()
                .setTitle('üî• Firebase Status')
                .setColor(isConnected ? config.colors.success : config.colors.error)
                .addFields({
                    name: 'Connection Status',
                    value: isConnected ? '‚úÖ Connected' : '‚ùå Not Connected',
                    inline: true
                });

            if (isConnected) {
                try {
                    const statsResult = await firebase.getTicketStats();
                    if (statsResult.success) {
                        embed.addFields({
                            name: 'Database Stats',
                            value: `Total Tickets: ${statsResult.stats.total}\nOpen: ${statsResult.stats.open || 0}\nClosed: ${statsResult.stats.closed || 0}`,
                            inline: true
                        });
                    }
                } catch (error) {
                    embed.addFields({
                        name: 'Database Stats',
                        value: 'Error retrieving stats',
                        inline: true
                    });
                }
            }

            await message.reply({ embeds: [embed] });
        }
    });

    // Handle dropdown selection and create ticket
    client.on('interactionCreate', async (interaction) => {
        if (!interaction.isStringSelectMenu()) return;

        if (interaction.customId === 'ticket_category_select') {
            console.log('Dropdown selection detected!');

            // Check operating hours
            if (!scheduleManager.isInOperatingHours()) {
                const operatingMsg = scheduleManager.getOperatingHoursMessage();
                const embed = new EmbedBuilder()
                    .setTitle(operatingMsg.title)
                    .setDescription(operatingMsg.description)
                    .setColor(operatingMsg.color)
                    .addFields(operatingMsg.fields)
                    .setTimestamp();

                return interaction.reply({
                    embeds: [embed],
                    ephemeral: true
                });
            }
            
            const selectedCategory = interaction.values[0];
            const category = config.ticketCategories[selectedCategory];
            const user = interaction.user;
            const guild = interaction.guild;

            // Check if user already has an active ticket
            if (ticketManager.hasActiveTicket(user.id)) {
                const activeTicket = ticketManager.getActiveTicket(user.id);
                const channel = guild.channels.cache.get(activeTicket.channelId);
                
                return interaction.reply({
                    content: `‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà ${channel ? channel.toString() : '‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó‡∏ï‡∏±‡πã‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì'}`,
                    ephemeral: true
                });
            }

            // Check if user can create more tickets
            if (!ticketManager.canCreateTicket(user.id)) {
                return interaction.reply({
                    content: `‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏∂‡∏á‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡πã‡∏ß‡πÅ‡∏•‡πâ‡∏ß (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î ${config.bot.maxTicketsPerUser} ‡∏ï‡∏±‡πã‡∏ß‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô)`,
                    ephemeral: true
                });
            }

            // Defer the reply to give us more time to create the channel
            await interaction.deferReply({ ephemeral: true });

            try {
                // Create the ticket channel
                const result = await ticketManager.createTicketChannel(guild, user, selectedCategory);
                
                if (!result.success) {
                    return interaction.editReply({
                        content: `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡πã‡∏ß: ${result.error}`
                    });
                }

                const { channel, data } = result;
                console.log(`Ticket created: ${channel.name} for ${user.tag}`);

                // Create welcome embed for the ticket
                const welcomeEmbed = new EmbedBuilder()
                    .setTitle(`${category.emoji} ${category.label}`)
                    .setDescription(`‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ${user}! üëã\n\n‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô Thai Esports League\n‡πÇ‡∏õ‡∏£‡∏î‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢`)
                    .setColor(category.color)
                    .addFields(
                        { name: 'üé´ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ï‡∏±‡πã‡∏ß', value: `#${data.ticketNumber}`, inline: true },
                        { name: 'üìÇ ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà', value: category.label, inline: true },
                        { name: 'üïê ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á', value: `<t:${Math.floor(data.createdAt / 1000)}:F>`, inline: true },
                        { name: 'üë§ ‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á', value: user.toString(), inline: true }
                    )
                    .setFooter({ text: `Ticket #${data.ticketNumber} | ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠` })
                    .setTimestamp();

                // Create close and pause buttons
                const closeButton = new ButtonBuilder()
                    .setCustomId('close_ticket')
                    .setLabel('üîí ‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡πã‡∏ß')
                    .setStyle(ButtonStyle.Danger);

                const pauseButton = new ButtonBuilder()
                    .setCustomId('pause_ticket')
                    .setLabel('‚è∏Ô∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß')
                    .setStyle(ButtonStyle.Secondary);

                const buttonRow = new ActionRowBuilder().addComponents(pauseButton, closeButton);

                // Send welcome message to the ticket channel
                await channel.send({
                    content: `${user} ${config.server.staffRoleId ? `<@&${config.server.staffRoleId}>` : ''}`,
                    embeds: [welcomeEmbed],
                    components: [buttonRow]
                });

                // Reply to the user
                await interaction.editReply({
                    content: `‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡πã‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà ${channel} ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠`
                });

                // Log to console
                console.log(`‚úÖ Ticket created successfully: ${channel.name} (${channel.id}) for ${user.tag}`);

                // Log to log channel if configured
                if (config.server.logChannelId) {
                    const logChannel = guild.channels.cache.get(config.server.logChannelId);
                    if (logChannel) {
                        const logEmbed = new EmbedBuilder()
                            .setTitle('üìù ‡∏ï‡∏±‡πã‡∏ß‡πÉ‡∏´‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á')
                            .setColor(config.colors.success)
                            .addFields(
                                { name: 'üé´ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç', value: `#${data.ticketNumber}`, inline: true },
                                { name: 'üë§ ‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á', value: `${user.tag} (${user.id})`, inline: true },
                                { name: 'üìÇ ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà', value: category.label, inline: true },
                                { name: 'üè∑Ô∏è ‡∏´‡πâ‡∏≠‡∏á', value: channel.toString(), inline: true }
                            )
                            .setTimestamp();

                        await logChannel.send({ embeds: [logEmbed] }).catch(console.error);
                    }
                }

            } catch (error) {
                console.error('Error in ticket creation process:', error);
                await interaction.editReply({
                    content: `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡πã‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö`
                });
            }
        }
    });

    // Handle button interactions (close, pause, unpause)
    client.on('interactionCreate', async (interaction) => {
        if (!interaction.isButton()) return;

        const channel = interaction.channel;
        const ticket = ticketManager.getTicketByChannelId(channel.id);

        if (!ticket) {
            return interaction.reply({
                content: '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡πã‡∏ß‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö',
                ephemeral: true
            });
        }

        // Check permissions for staff actions
        const isStaff = interaction.member.permissions.has(PermissionFlagsBits.ManageChannels) ||
                       (config.server.staffRoleId && interaction.member.roles.cache.has(config.server.staffRoleId));
        const isTicketOwner = interaction.user.id === ticket.userId;

        if (interaction.customId === 'pause_ticket') {
            if (!isStaff) {
                return interaction.reply({
                    content: '‚ùå ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏¢‡∏∏‡∏î‡∏ï‡∏±‡πã‡∏ß‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÑ‡∏î‡πâ',
                    ephemeral: true
                });
            }

            if (ticket.isPaused) {
                return interaction.reply({
                    content: '‚ö†Ô∏è ‡∏ï‡∏±‡πã‡∏ß‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏´‡∏¢‡∏∏‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß',
                    ephemeral: true
                });
            }

            // Pause the ticket
            const pauseResult = await ticketManager.pauseTicket(channel.id, interaction.user);
            
            if (pauseResult.success) {
                // Update channel permissions to prevent user from sending messages
                await channel.permissionOverwrites.edit(ticket.userId, {
                    SendMessages: false
                });

                // Create unpause button
                const unpauseButton = new ButtonBuilder()
                    .setCustomId('unpause_ticket')
                    .setLabel('‚ñ∂Ô∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà')
                    .setStyle(ButtonStyle.Success);

                const closeButton = new ButtonBuilder()
                    .setCustomId('close_ticket')
                    .setLabel('üîí ‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡πã‡∏ß')
                    .setStyle(ButtonStyle.Danger);

                const buttonRow = new ActionRowBuilder().addComponents(unpauseButton, closeButton);

                const pauseEmbed = new EmbedBuilder()
                    .setTitle('‚è∏Ô∏è ‡∏ï‡∏±‡πã‡∏ß‡∏ñ‡∏π‡∏Å‡∏´‡∏¢‡∏∏‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß')
                    .setDescription(`‡∏ï‡∏±‡πã‡∏ß‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏´‡∏¢‡∏∏‡∏î‡πÇ‡∏î‡∏¢ ${interaction.user}\n\n‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà`)
                    .setColor(config.colors.warning)
                    .setTimestamp();

                await interaction.reply({
                    embeds: [pauseEmbed],
                    components: [buttonRow]
                });

                console.log(`‚è∏Ô∏è Ticket paused: ${channel.name} by ${interaction.user.tag}`);
            } else {
                await interaction.reply({
                    content: `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏∏‡∏î‡∏ï‡∏±‡πã‡∏ß: ${pauseResult.error}`,
                    ephemeral: true
                });
            }
        }

        else if (interaction.customId === 'unpause_ticket') {
            if (!isStaff) {
                return interaction.reply({
                    content: '‚ùå ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏±‡πã‡∏ß‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ',
                    ephemeral: true
                });
            }

            if (!ticket.isPaused) {
                return interaction.reply({
                    content: '‚ö†Ô∏è ‡∏ï‡∏±‡πã‡∏ß‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏´‡∏¢‡∏∏‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß',
                    ephemeral: true
                });
            }

            // Unpause the ticket
            const unpauseResult = await ticketManager.unpauseTicket(channel.id, interaction.user);
            
            if (unpauseResult.success) {
                // Restore user permissions
                await channel.permissionOverwrites.edit(ticket.userId, {
                    SendMessages: true
                });

                // Restore original buttons
                const pauseButton = new ButtonBuilder()
                    .setCustomId('pause_ticket')
                    .setLabel('‚è∏Ô∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß')
                    .setStyle(ButtonStyle.Secondary);

                const closeButton = new ButtonBuilder()
                    .setCustomId('close_ticket')
                    .setLabel('üîí ‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡πã‡∏ß')
                    .setStyle(ButtonStyle.Danger);

                const buttonRow = new ActionRowBuilder().addComponents(pauseButton, closeButton);

                const unpauseEmbed = new EmbedBuilder()
                    .setTitle('‚ñ∂Ô∏è ‡∏ï‡∏±‡πã‡∏ß‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà')
                    .setDescription(`‡∏ï‡∏±‡πã‡∏ß‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢ ${interaction.user}\n\n‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß`)
                    .setColor(config.colors.success)
                    .setTimestamp();

                await interaction.reply({
                    embeds: [unpauseEmbed],
                    components: [buttonRow]
                });

                console.log(`‚ñ∂Ô∏è Ticket unpaused: ${channel.name} by ${interaction.user.tag}`);
            } else {
                await interaction.reply({
                    content: `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏±‡πã‡∏ß‡πÉ‡∏´‡∏°‡πà: ${unpauseResult.error}`,
                    ephemeral: true
                });
            }
        }

        else if (interaction.customId === 'close_ticket') {
            // Check if user has permission to close (ticket owner or staff)
            const canClose = isTicketOwner || isStaff;

            if (!canClose) {
                return interaction.reply({
                    content: '‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡πã‡∏ß‡∏ô‡∏µ‡πâ',
                    ephemeral: true
                });
            }

            await interaction.reply({
                content: 'üîí ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡πã‡∏ß... ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á transcript ‡πÅ‡∏•‡∏∞‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÉ‡∏ô 15 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ',
            });

            // Generate transcript before closing
            console.log('üìÑ Generating transcript...');
            const transcriptResult = await ticketManager.generateTranscript(channel);
            
            let transcriptSent = false;
            let transcriptUrl = null;
            
            if (transcriptResult.success) {
                try {
                    // Save transcript to file system and get URL
                    const fileUtils = require('../utils/fileUtils');
                    const transcriptServer = require('../utils/transcriptServer');
                    
                    const saveResult = await fileUtils.saveTranscript(channel.name, transcriptResult.html, ticket.ticketNumber);
                    
                    if (saveResult.success) {
                        // Create direct link using the transcript server
                        transcriptUrl = transcriptServer.getTranscriptUrl(saveResult.fileName);
                        console.log('üîó Transcript URL:', transcriptUrl);

                        // Save transcript metadata to Firebase
                        firebase.saveTranscriptMetadata(ticket.ticketNumber, transcriptUrl, transcriptResult.messageCount)
                            .catch(err => console.error('Non-critical Firebase transcript save error:', err.message));
                    }

                    // Send transcript to log channel if configured
                    if (config.server.logChannelId) {
                        const logChannel = interaction.guild.channels.cache.get(config.server.logChannelId);
                        if (logChannel) {
                            const transcriptBuffer = Buffer.from(transcriptResult.html, 'utf8');
                            const fileName = `transcript-${ticket.ticketNumber}-${new Date().toISOString().split('T')[0]}.html`;
                            
                            await logChannel.send({
                                content: `üìã **Transcript ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡πã‡∏ß:** #${ticket.ticketNumber}${transcriptUrl ? `\nüîó **Direct Link:** ${transcriptUrl}` : ''}`,
                                files: [{
                                    attachment: transcriptBuffer,
                                    name: fileName
                                }]
                            });
                            transcriptSent = true;
                            console.log('‚úÖ Transcript saved to log channel with direct link');
                        }
                    }

                } catch (error) {
                    console.error('‚ùå Error sending transcript:', error);
                }
            } else {
                console.error('‚ùå Failed to generate transcript:', transcriptResult.error);
            }

            // Close ticket in manager
            const closeResult = await ticketManager.closeTicket(channel.id, interaction.user);
            
            if (closeResult.success) {
                // Log closure if log channel exists
                if (config.server.logChannelId) {
                    const logChannel = interaction.guild.channels.cache.get(config.server.logChannelId);
                    if (logChannel) {
                        const user = interaction.guild.members.cache.get(ticket.userId);
                        const category = config.ticketCategories[ticket.category];
                        const closeEmbed = new EmbedBuilder()
                            .setTitle('üîí ‡∏ï‡∏±‡πã‡∏ß‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î')
                            .setColor(config.colors.error)
                            .addFields(
                                { name: 'üé´ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç', value: `#${ticket.ticketNumber}`, inline: true },
                                { name: 'üë§ ‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡πã‡∏ß', value: user ? `${user.user.tag} (${user.id})` : `User ID: ${ticket.userId}`, inline: true },
                                { name: 'üîê ‡∏õ‡∏¥‡∏î‡πÇ‡∏î‡∏¢', value: `${interaction.user.tag} (${interaction.user.id})`, inline: true },
                                { name: 'üìÇ ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà', value: category?.label || ticket.category, inline: true },
                                { name: '‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ', value: `<t:${Math.floor(ticket.createdAt / 1000)}:R>`, inline: true },
                                { name: 'üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°', value: transcriptResult.success ? transcriptResult.messageCount.toString() : '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ô‡∏±‡∏ö‡πÑ‡∏î‡πâ', inline: true },
                                { name: 'üîó Direct Link', value: transcriptUrl ? `[‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π](${transcriptUrl})` : '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏î‡πâ', inline: true },
                            )
                            .setTimestamp();

                        await logChannel.send({ embeds: [closeEmbed] }).catch(console.error);
                    }
                }

                // Delete channel after delay
                setTimeout(async () => {
                    try {
                        await channel.delete('Ticket closed');
                        console.log(`üóëÔ∏è Ticket channel deleted: ${channel.name}`);
                    } catch (error) {
                        console.error('Error deleting ticket channel:', error);
                    }
                }, 15000);
            }
        }
    });
};