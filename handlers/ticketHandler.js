const { ActionRowBuilder, StringSelectMenuBuilder, ButtonBuilder, ButtonStyle, PermissionFlagsBits, EmbedBuilder, AttachmentBuilder } = require('discord.js');
const config = require('../config/config');
const ticketManager = require('../utils/ticketManager');
const scheduleManager = require('../utils/scheduleManager');
const ticketCounter = require('../utils/ticketCounter');
const firebase = require('../utils/firebase');

module.exports = (client) => {
    // === Handle prefix commands ===
    client.on('messageCreate', async (message) => {
        if (message.author.bot) return;

        // Check if message is in a paused ticket channel
        const ticket = ticketManager.getTicketByChannelId(message.channel.id);
        if (ticket && ticket.isPaused && message.author.id === ticket.userId) {
            await message.delete().catch(() => {});
            const warningMsg = await message.channel.send({
                content: `‚è∏Ô∏è ${message.author} ‡∏ï‡∏±‡πã‡∏ß‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏´‡∏¢‡∏∏‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÇ‡∏î‡∏¢‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ`
            });
            setTimeout(async () => { await warningMsg.delete().catch(() => {}); }, 5000);
            return;
        }

        console.log(`Message received: "${message.content}" from ${message.author.tag}`);
        
        const prefix = config.bot.prefix;
        if (!message.content.startsWith(prefix)) return;

        const args = message.content.slice(prefix.length).trim().split(/ +/);
        const command = args.shift().toLowerCase();

        // Handle !setup-tickets command
        if (command === 'setup-tickets') {
            console.log('Setup tickets command detected!');
            
            if (!message.member.permissions.has(PermissionFlagsBits.Administrator)) {
                return message.reply('‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Administrator ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ');
            }

            // const bannerImage = 'BWS ESPORTS suport tICKET.jpg'; // ‡∏•‡∏ö‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
            // const file = new AttachmentBuilder(`./additional_files/${bannerImage}`, { name: bannerImage }); // ‡πÅ‡∏•‡∏∞‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ

            const embed = new EmbedBuilder()
                .setTitle('üé´ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô - BWS Esports')
                .setDescription(
                    `## ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠ Support ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô\n\n` +
                    `‚Ä¢ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô\n` +
                    `‚Ä¢ ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞ ‡πÄ‡∏ä‡πà‡∏ô ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏° ‡∏´‡∏£‡∏∑‡∏≠ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡πÅ‡∏ô‡∏ö‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á\n\n` +
                    `‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á Ticket`
                )
                .setColor(config.colors.primary)
                .setImage('https://i.postimg.cc/BZHGmxWQ/BWS-ESPORTS-suport-t-ICKET.png') // ‡πÉ‡∏™‡πà URL ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡∏¢
                .setFooter({
                    text: 'BWS Esports - Support ‚Ä¢ ‡πÄ‡∏ß‡∏•‡∏≤',
                    iconURL: message.guild.iconURL({ dynamic: true }) || client.user.displayAvatarURL()
                })
                .setTimestamp();

            const selectMenu = new StringSelectMenuBuilder()
                .setCustomId('ticket_category_select')
                .setPlaceholder('üéØ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠')
                .addOptions(
                    Object.entries(config.ticketCategories).map(([key, category]) => ({
                        label: category.label,
                        description: category.description,
                        value: key,
                        emoji: category.emoji
                    }))
                );

            const row = new ActionRowBuilder().addComponents(selectMenu);

            await message.channel.send({
                embeds: [embed],
                components: [row]
            });

            console.log('Ticket panel sent successfully!');
            await message.delete().catch(() => {});
        }
        
        // Other prefix commands...
        if (command === 'test') {
            await message.reply('‚úÖ Commands are working!');
        }

        if (command === 'ticket-stats') {
            if (!message.member.permissions.has(PermissionFlagsBits.ManageChannels)) {
                return message.reply('‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ');
            }
            const stats = ticketManager.getStats();
            const embed = new EmbedBuilder()
                .setTitle('üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠')
                .setColor(config.colors.primary)
                .addFields(
                    { name: 'üé´ ‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà', value: stats.activeTickets.toString(), inline: true },
                    { name: 'üìã ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà', value: Object.entries(stats.categoriesBreakdown).map(([cat, count]) => `${config.ticketCategories[cat]?.emoji || 'üìÑ'} ${config.ticketCategories[cat]?.label || cat}: ${count}`).join('\n') || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡πã‡∏ß‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà' }
                )
                .setTimestamp();
            await message.reply({ embeds: [embed] });
        }
        
        if (command === 'ticket-counters') {
            if (!message.member.permissions.has(PermissionFlagsBits.ManageChannels)) {
                return message.reply('‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ');
            }
            const stats = await ticketCounter.getStats();
            const embed = new EmbedBuilder()
                .setTitle('üî¢ ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ï‡∏±‡πã‡∏ß')
                .setColor(config.colors.primary)
                .setDescription('‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ï‡∏±‡πã‡∏ß‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà')
                .setTimestamp();
            for (const [category, data] of Object.entries(stats)) {
                const categoryInfo = config.ticketCategories[category];
                embed.addFields({
                    name: `${categoryInfo?.emoji || 'üìÑ'} ${categoryInfo?.label || category}`,
                    value: `**‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß:** ${data.total} ‡∏ï‡∏±‡πã‡∏ß\n**‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:** ${data.current}\n**‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ñ‡∏±‡∏î‡πÑ‡∏õ:** ${data.next}`,
                    inline: true
                });
            }
            await message.reply({ embeds: [embed] });
        }
        
        if (command === 'reset-counters') {
            if (!message.member.permissions.has(PermissionFlagsBits.Administrator)) {
                return message.reply('‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Administrator ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ');
            }
            await ticketCounter.resetCounters();
            await message.reply('üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!');
        }

        if (command === 'force-close') {
            if (!message.member.permissions.has(PermissionFlagsBits.Administrator)) {
                return message.reply('‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Administrator ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ');
            }
            const ticket = ticketManager.getTicketByChannelId(message.channel.id);
            if (!ticket) {
                return message.reply('‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ï‡∏±‡πã‡∏ß‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô');
            }
            await message.reply('üîí ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡πã‡∏ß‡πÅ‡∏ö‡∏ö‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö...');
            const transcriptResult = await ticketManager.generateTranscript(message.channel);
            await ticketManager.closeTicket(message.channel.id, message.author);
            console.log(`üî® Force closed ticket: ${message.channel.name} by ${message.author.tag}`);
            setTimeout(async () => { try { await message.channel.delete('Force closed by admin'); } catch (error) { console.error('Error deleting channel:', error); } }, 5000);
        }

        if (command === 'firebase-status') {
            if (!message.member.permissions.has(PermissionFlagsBits.Administrator)) {
                return message.reply('‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Administrator ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ');
            }
            const isConnected = firebase.isInitialized();
            const embed = new EmbedBuilder()
                .setTitle('üî• Firebase Status')
                .setColor(isConnected ? config.colors.success : config.colors.error)
                .addFields({ name: 'Connection Status', value: isConnected ? '‚úÖ Connected' : '‚ùå Not Connected', inline: true });
            if (isConnected) {
                try {
                    const statsResult = await firebase.getTicketStats();
                    if (statsResult.success) {
                        embed.addFields({
                            name: 'Database Stats',
                            value: `Total Tickets: ${statsResult.stats.total}\nOpen: ${statsResult.stats.open || 0}\nClosed: ${statsResult.stats.closed || 0}`,
                            inline: true
                        });
                    }
                } catch (error) {
                    embed.addFields({ name: 'Database Stats', value: 'Error retrieving stats', inline: true });
                }
            }
            await message.reply({ embeds: [embed] });
        }
    });

    // === Handle dropdown selection and button interactions ===
    client.on('interactionCreate', async (interaction) => {
        // Handle dropdown selection
        if (interaction.isStringSelectMenu()) {
            if (interaction.customId === 'ticket_category_select') {
                console.log('Dropdown selection detected!');

                if (!scheduleManager.isInOperatingHours()) {
                    const operatingMsg = scheduleManager.getOperatingHoursMessage();
                    const embed = new EmbedBuilder().setTitle(operatingMsg.title).setDescription(operatingMsg.description).setColor(operatingMsg.color).addFields(operatingMsg.fields).setTimestamp();
                    return interaction.reply({ embeds: [embed], ephemeral: true });
                }

                const selectedCategory = interaction.values[0];
                const category = config.ticketCategories[selectedCategory];
                const user = interaction.user;
                const guild = interaction.guild;

                if (ticketManager.hasActiveTicket(user.id)) {
                    const activeTicket = ticketManager.getActiveTicket(user.id);
                    const channel = guild.channels.cache.get(activeTicket.channelId);
                    return interaction.reply({
                        content: `‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏ï‡∏±‡πã‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà ${channel ? channel.toString() : '‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó‡∏ï‡∏±‡πã‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì'}`,
                        ephemeral: true
                    });
                }
                
                if (!ticketManager.canCreateTicket(user.id)) {
                    return interaction.reply({
                        content: `‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏∂‡∏á‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡πã‡∏ß‡πÅ‡∏•‡πâ‡∏ß (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î ${config.bot.maxTicketsPerUser} ‡∏ï‡∏±‡πã‡∏ß‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô)`,
                        ephemeral: true
                    });
                }

                await interaction.deferReply({ ephemeral: true });

                try {
                    const result = await ticketManager.createTicketChannel(guild, user, selectedCategory);
                    
                    if (!result.success) {
                        return interaction.editReply({ content: `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡πã‡∏ß: ${result.error}` });
                    }

                    const { channel, data } = result;
                    console.log(`Ticket created: ${channel.name} for ${user.tag}`);

                    // --- Start of welcome message logic from user's code ---
                    let dynamicDescription = '';
                    switch (selectedCategory) {
                        case 'member_edit':
                            dynamicDescription =
                                `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ${user}! üëã‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ <@&${config.server.staffRoleId}> ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß ‡∏û‡∏ß‡∏Å‡πÄ‡∏Ç‡∏≤‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡πÄ‡∏£‡πá‡∏ß ‡πÜ ‡∏ô‡∏µ‡πâ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏û‡∏±‡∏Å‡∏ô‡∏∂‡∏á ‡πÇ‡∏õ‡∏£‡∏î‡πÅ‡∏à‡πâ‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏à‡πâ‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô Staff ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏ì ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á\n\n` +
                                `**‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ**\n` +
                                `- ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô\n` +
                                `- Game name\n` +
                                `- Game UID\n\n` +
                                `‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô BWS Esports\n` +
                                `‡πÇ‡∏õ‡∏£‡∏î‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢`;
                            break;
                        case 'schedule_report':
                            dynamicDescription =
                                `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ${user}! üëã‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ <@&${config.server.staffRoleId}> ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß ‡∏û‡∏ß‡∏Å‡πÄ‡∏Ç‡∏≤‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡πÄ‡∏£‡πá‡∏ß ‡πÜ ‡∏ô‡∏µ‡πâ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏û‡∏±‡∏Å‡∏ô‡∏∂‡∏á ‡πÇ‡∏õ‡∏£‡∏î‡πÅ‡∏à‡πâ‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏à‡πâ‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô Staff ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏ì ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á\n\n` +
                                `**‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ**\n` +
                                `- ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡∏°‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ó‡∏µ‡∏°\n` +
                                `- ‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏•‡πâ‡∏ß\n` +
                                `- ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢‡πÅ‡∏•‡∏∞‡∏ï‡∏Å‡∏•‡∏á‡∏Å‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ó‡∏µ‡∏°\n\n` +
                                `‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô BWS Esports\n` +
                                `‡πÇ‡∏õ‡∏£‡∏î‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢`;
                            break;
                        case 'behavior_report':
                            dynamicDescription =
                                `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ${user}! üëã‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ <@&${config.server.staffRoleId}> ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß ‡∏û‡∏ß‡∏Å‡πÄ‡∏Ç‡∏≤‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡πÄ‡∏£‡πá‡∏ß ‡πÜ ‡∏ô‡∏µ‡πâ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏û‡∏±‡∏Å‡∏ô‡∏∂‡∏á ‡πÇ‡∏õ‡∏£‡∏î‡πÅ‡∏à‡πâ‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏à‡πâ‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô Staff ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏ì ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á\n\n` +
                                `**‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ**\n` +
                                `- ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡∏°‡∏Ñ‡∏π‡πà‡∏Å‡∏£‡∏ì‡∏µ\n` +
                                `- ‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÅ‡∏Ç‡πà‡∏á‡∏Ñ‡∏π‡πà‡∏Å‡∏£‡∏ì‡∏µ\n` +
                                `- ‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏ú‡∏¥‡∏î (‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û, ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏†‡∏≤‡∏û ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á)\n\n` +
                                `‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô BWS Esports\n` +
                                `‡πÇ‡∏õ‡∏£‡∏î‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢`;
                            break;
                        case 'technical_issue':
                        case 'general_contact':
                            dynamicDescription =
                                `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ${user}! üëã‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ <@&${config.server.staffRoleId}> ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß ‡∏û‡∏ß‡∏Å‡πÄ‡∏Ç‡∏≤‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡πÄ‡∏£‡πá‡∏ß ‡πÜ ‡∏ô‡∏µ‡πâ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏û‡∏±‡∏Å‡∏ô‡∏∂‡∏á ‡πÇ‡∏õ‡∏£‡∏î‡πÅ‡∏à‡πâ‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏à‡πâ‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô Staff ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏ì ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á\n\n` +
                                `**‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ**\n` +
                                `- ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Ç‡πà‡∏á (‡∏ó‡∏±‡πâ‡∏á‡∏ó‡∏µ‡∏°‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á‡πÅ‡∏•‡∏∞‡∏ó‡∏µ‡∏°‡∏ù‡∏±‡πà‡∏á‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°)\n` +
                                `- ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤\n` +
                                `- ‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤ (‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ‡∏´‡∏£‡∏∑‡∏≠ ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏†‡∏≤‡∏û)\n\n` +
                                `‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô BWS Esports\n` +
                                `‡πÇ‡∏õ‡∏£‡∏î‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢`;
                            break;
                        default:
                            dynamicDescription =
                                `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ${user}! üëã\n\n‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô BWS Esports\n‡πÇ‡∏õ‡∏£‡∏î‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢`;
                    }
                    
                    const welcomeEmbed = new EmbedBuilder()
                        .setTitle(`${category.emoji} ${category.label}`)
                        .setDescription(dynamicDescription)
                        .setColor(category.color)
                        .addFields(
                            { name: 'üé´ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ï‡∏±‡πã‡∏ß', value: `#${data.ticketNumber}`, inline: true },
                            { name: 'üìÇ ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà', value: category.label, inline: true },
                            { name: 'üïê ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á', value: `<t:${Math.floor(data.createdAt / 1000)}:F>`, inline: true },
                            { name: 'üë§ ‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á', value: user.toString(), inline: true }
                        )
                        .setFooter({ text: `Ticket #${data.ticketNumber} | ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠` })
                        .setTimestamp();
                    // --- End of welcome message logic from user's code ---

                    // Create close and pause buttons
                    const closeButton = new ButtonBuilder().setCustomId('close_ticket').setLabel('üîí ‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡πã‡∏ß').setStyle(ButtonStyle.Danger);
                    const pauseButton = new ButtonBuilder().setCustomId('pause_ticket').setLabel('‚è∏Ô∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß').setStyle(ButtonStyle.Secondary);
                    const buttonRow = new ActionRowBuilder().addComponents(pauseButton, closeButton);

                    await channel.send({ embeds: [welcomeEmbed], components: [buttonRow] });
                    await interaction.editReply({ content: `‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡πã‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà ${channel} ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠` });
                    console.log(`‚úÖ Ticket created successfully: ${channel.name} (${channel.id}) for ${user.tag}`);
                    
                    if (config.server.logChannelId) {
                        const logChannel = guild.channels.cache.get(config.server.logChannelId);
                        if (logChannel) {
                            const logEmbed = new EmbedBuilder()
                                .setTitle('üìù ‡∏ï‡∏±‡πã‡∏ß‡πÉ‡∏´‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á')
                                .setColor(config.colors.success)
                                .addFields(
                                    { name: 'üé´ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç', value: `#${data.ticketNumber}`, inline: true },
                                    { name: 'üë§ ‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á', value: `${user.tag} (${user.id})`, inline: true },
                                    { name: 'üìÇ ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà', value: category.label, inline: true },
                                    { name: 'üè∑Ô∏è ‡∏´‡πâ‡∏≠‡∏á', value: channel.toString(), inline: true }
                                )
                                .setTimestamp();
                            await logChannel.send({ embeds: [logEmbed] }).catch(console.error);
                        }
                    }
                } catch (error) {
                    console.error('Error in ticket creation process:', error);
                    await interaction.editReply({ content: `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡πã‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö` });
                }
            }
        }
        
        // Handle button interactions
        if (!interaction.isButton()) return;
        const channel = interaction.channel;
        const ticket = ticketManager.getTicketByChannelId(channel.id);
        if (!ticket) { return interaction.reply({ content: '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡πã‡∏ß‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö', ephemeral: true }); }
        
        const isStaff = interaction.member.permissions.has(PermissionFlagsBits.ManageChannels) || (config.server.staffRoleId && interaction.member.roles.cache.has(config.server.staffRoleId));
        const isTicketOwner = interaction.user.id === ticket.userId;

        if (interaction.customId === 'pause_ticket') {
            if (!isStaff) { return interaction.reply({ content: '‚ùå ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏¢‡∏∏‡∏î‡∏ï‡∏±‡πã‡∏ß‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÑ‡∏î‡πâ', ephemeral: true }); }
            if (ticket.isPaused) { return interaction.reply({ content: '‚ö†Ô∏è ‡∏ï‡∏±‡πã‡∏ß‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏´‡∏¢‡∏∏‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß', ephemeral: true }); }
            const pauseResult = await ticketManager.pauseTicket(channel.id, interaction.user);
            if (pauseResult.success) {
                await channel.permissionOverwrites.edit(ticket.userId, { SendMessages: false });
                const unpauseButton = new ButtonBuilder().setCustomId('unpause_ticket').setLabel('‚ñ∂Ô∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà').setStyle(ButtonStyle.Success);
                const closeButton = new ButtonBuilder().setCustomId('close_ticket').setLabel('üîí ‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡πã‡∏ß').setStyle(ButtonStyle.Danger);
                const buttonRow = new ActionRowBuilder().addComponents(unpauseButton, closeButton);
                const pauseEmbed = new EmbedBuilder().setTitle('‚è∏Ô∏è ‡∏ï‡∏±‡πã‡∏ß‡∏ñ‡∏π‡∏Å‡∏´‡∏¢‡∏∏‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß').setDescription(`‡∏ï‡∏±‡πã‡∏ß‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏´‡∏¢‡∏∏‡∏î‡πÇ‡∏î‡∏¢ ${interaction.user}\n\n‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà`).setColor(config.colors.warning).setTimestamp();
                await interaction.reply({ embeds: [pauseEmbed], components: [buttonRow] });
                console.log(`‚è∏Ô∏è Ticket paused: ${channel.name} by ${interaction.user.tag}`);
            } else { await interaction.reply({ content: `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏∏‡∏î‡∏ï‡∏±‡πã‡∏ß: ${pauseResult.error}`, ephemeral: true }); }
        } else if (interaction.customId === 'unpause_ticket') {
            if (!isStaff) { return interaction.reply({ content: '‚ùå ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏±‡πã‡∏ß‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ', ephemeral: true }); }
            if (!ticket.isPaused) { return interaction.reply({ content: '‚ö†Ô∏è ‡∏ï‡∏±‡πã‡∏ß‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏´‡∏¢‡∏∏‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß', ephemeral: true }); }
            const unpauseResult = await ticketManager.unpauseTicket(channel.id, interaction.user);
            if (unpauseResult.success) {
                await channel.permissionOverwrites.edit(ticket.userId, { SendMessages: true });
                const pauseButton = new ButtonBuilder().setCustomId('pause_ticket').setLabel('‚è∏Ô∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß').setStyle(ButtonStyle.Secondary);
                const closeButton = new ButtonBuilder().setCustomId('close_ticket').setLabel('üîí ‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡πã‡∏ß').setStyle(ButtonStyle.Danger);
                const buttonRow = new ActionRowBuilder().addComponents(pauseButton, closeButton);
                const unpauseEmbed = new EmbedBuilder().setTitle('‚ñ∂Ô∏è ‡∏ï‡∏±‡πã‡∏ß‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà').setDescription(`‡∏ï‡∏±‡πã‡∏ß‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢ ${interaction.user}\n\n‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß`).setColor(config.colors.success).setTimestamp();
                await interaction.reply({ embeds: [unpauseEmbed], components: [buttonRow] });
                console.log(`‚ñ∂Ô∏è Ticket unpaused: ${channel.name} by ${interaction.user.tag}`);
            } else { await interaction.reply({ content: `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏±‡πã‡∏ß‡πÉ‡∏´‡∏°‡πà: ${unpauseResult.error}`, ephemeral: true }); }
        } else if (interaction.customId === 'close_ticket') {
            const canClose = isTicketOwner || isStaff;
            if (!canClose) { return interaction.reply({ content: '‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡πã‡∏ß‡∏ô‡∏µ‡πâ', ephemeral: true }); }
            await interaction.reply({ content: 'üîí ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡πã‡∏ß... ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á transcript ‡πÅ‡∏•‡∏∞‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÉ‡∏ô 15 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ', });
            const transcriptResult = await ticketManager.generateTranscript(channel);
            let transcriptSent = false;
            let transcriptUrl = null;
            if (transcriptResult.success) {
                try {
                    const fileUtils = require('../utils/fileUtils');
                    const transcriptServer = require('../utils/transcriptServer');
                    const saveResult = await fileUtils.saveTranscript(channel.name, transcriptResult.html, ticket.ticketNumber);
                    if (saveResult.success) {
                        transcriptUrl = transcriptServer.getTranscriptUrl(saveResult.fileName);
                        console.log('üîó Transcript URL:', transcriptUrl);
                        firebase.saveTranscriptMetadata(ticket.ticketNumber, transcriptUrl, transcriptResult.messageCount).catch(err => console.error('Non-critical Firebase transcript save error:', err.message));
                    }
                    if (config.server.logChannelId) {
                        const logChannel = interaction.guild.channels.cache.get(config.server.logChannelId);
                        if (logChannel) {
                            const transcriptBuffer = Buffer.from(transcriptResult.html, 'utf8');
                            const fileName = `transcript-${ticket.ticketNumber}-${new Date().toISOString().split('T')[0]}.html`;
                            await logChannel.send({ content: `üìã **Transcript ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡πã‡∏ß:** #${ticket.ticketNumber}${transcriptUrl ? `\nüîó **Direct Link:** ${transcriptUrl}` : ''}`, files: [{ attachment: transcriptBuffer, name: fileName }] });
                            transcriptSent = true;
                            console.log('‚úÖ Transcript saved to log channel with direct link');
                        }
                    }
                } catch (error) { console.error('‚ùå Error sending transcript:', error); }
            } else { console.error('‚ùå Failed to generate transcript:', transcriptResult.error); }
            const closeResult = await ticketManager.closeTicket(channel.id, interaction.user);
            if (closeResult.success) {
                if (config.server.logChannelId) {
                    const logChannel = interaction.guild.channels.cache.get(config.server.logChannelId);
                    if (logChannel) {
                        const user = interaction.guild.members.cache.get(ticket.userId);
                        const category = config.ticketCategories[ticket.category];
                        const closeEmbed = new EmbedBuilder().setTitle('üîí ‡∏ï‡∏±‡πã‡∏ß‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î').setColor(config.colors.error).addFields({ name: 'üé´ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç', value: `#${ticket.ticketNumber}`, inline: true }, { name: 'üë§ ‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡πã‡∏ß', value: user ? `${user.user.tag} (${user.id})` : `User ID: ${ticket.userId}`, inline: true }, { name: 'üîê ‡∏õ‡∏¥‡∏î‡πÇ‡∏î‡∏¢', value: `${interaction.user.tag} (${interaction.user.id})`, inline: true }, { name: 'üìÇ ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà', value: category?.label || ticket.category, inline: true }, { name: '‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ', value: `<t:${Math.floor(ticket.createdAt / 1000)}:R>`, inline: true }, { name: 'üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°', value: transcriptResult.success ? transcriptResult.messageCount.toString() : '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ô‡∏±‡∏ö‡πÑ‡∏î‡πâ', inline: true }, { name: 'üîó Direct Link', value: transcriptUrl ? `[‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π](${transcriptUrl})` : '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏î‡πâ', inline: true }).setTimestamp();
                        await logChannel.send({ embeds: [closeEmbed] }).catch(console.error);
                    }
                }
                setTimeout(async () => { try { await channel.delete('Ticket closed'); console.log(`üóëÔ∏è Ticket channel deleted: ${channel.name}`); } catch (error) { console.error('Error deleting ticket channel:', error); } }, 15000);
            }
        }
    });
};